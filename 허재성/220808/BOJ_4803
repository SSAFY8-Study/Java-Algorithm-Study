import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

/**
 * 
 * @author koreii
 * @see https://www.acmicpc.net/problem/4803
 * @difficuly G4
 * @performance 62696KB   436ms
 * @category # 깊이우선탐색(DFS), 트리(Tree), 사이클 판별(Cycle)
 * @memo Two Pointers 문제를 많이, 여러번 풀어봐야 할 듯.
 * @etc  구현 자체는 Binary Search보다도 쉬움.
 *  
 */

public class BOJ_4803 {
	static int N, M;
	static BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer tokens;
	static StringBuilder sb = new StringBuilder();
	static List<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();
	static boolean[] visited;		//	정점을 방문했는지 check	
	static int nTrees = 0;
	static boolean isTree = true;	//	해당 그래프가 트리인지
	
	static void dfs(int v, int p) {
//		System.out.println("dfs(" + v + ", " + p + ")");
		visited[v] = true;	//	정점 v 방문
		
		for(int i = 0; i < graph.get(v).size(); i++) {
			int next = graph.get(v).get(i);
			
			if(next == p)	//	다음 정점이 부모 정점일 경우 무시
				continue;
			else if(visited[next])	//	부모 정점이 아닌데 이미 방문한 정점이 나올 경우
				isTree = false;	//	cycle 발생, Tree가 아님
			else
				dfs(next, v);	//	next의 부모를 v로 하여 dfs
		}
	}
	
	public static void main(String[] args) throws IOException {
		int t = 1;
		while(true) {
			nTrees = 0;
			tokens = new StringTokenizer(bf.readLine());
			N = Integer.parseInt(tokens.nextToken());
			M = Integer.parseInt(tokens.nextToken());
			graph = new ArrayList<ArrayList<Integer>>();
			
			if(N == 0 && M == 0)	//	종료 조건
				break;
			
			for(int i = 0; i < N + 1; i++)
				graph.add(new ArrayList<Integer>());
			
			visited = new boolean[N + 1];
			
			for(int i = 0; i < M; i++) {	//	그래프 생성
				int a, b;
				tokens = new StringTokenizer(bf.readLine());
				a = Integer.parseInt(tokens.nextToken());
				b = Integer.parseInt(tokens.nextToken()); 
				
				graph.get(a).add(b);
				graph.get(b).add(a);
			}
			
//			for(int i = 1; i <= N; i++) {
//				System.out.print("graph[" + i + "] : ");
//				for(int j = 0; j < graph.get(i).size(); j++)
//					System.out.print(graph.get(i).get(j) + " ");
//				System.out.println();
//			}
			for(int i = 1; i <= N; i++) {
				isTree = true;
				
				if(!visited[i]) {	//	각 Connected Component 탐색
					nTrees++;		//	일단 모든 Connected Component가 트리라고 가정
					dfs(i, -1);		//	i를 루트로 하는 트리로 가정, i의 부모는 -1(없음)
					if(!isTree)		//	만약 트리가 아니면
						nTrees--;	//	트리 개수 1 감소
				}
			}
			
			if(nTrees > 1)
				sb.append("Case " + t + ": " + "A forest of " + nTrees + " trees.\n");
			else if(nTrees == 1)
				sb.append("Case " + t + ": " + "There is one tree.\n");
			else
				sb.append("Case " + t + ": " + "No trees.\n");
			t++;
		}
		System.out.println(sb.toString());
	}
}